services:
  # Database - PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: event-survey-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-event_survey}
    ports:
      - "5433:5432" # host:container (host port chosen to avoid collisions)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # API - built from docker/Dockerfile.api
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: event-survey-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/event_survey?schema=public}
      NODE_ENV: production
      PORT: 3001
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001/health', res => { if (res.statusCode!==200) process.exit(1); }).on('error', () => process.exit(1));\"" ]
      interval: 30s
      timeout: 5s
      retries: 3
    command: ./start.sh

  # Web - build the static frontend and serve via nginx
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: event-survey-web
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "8080:80" # map host 8080 to nginx 80 inside container for local testing
    environment:
      NODE_ENV: production
    healthcheck:
      test: ["CMD-SHELL", "test -s /usr/share/nginx/html/index.html || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
