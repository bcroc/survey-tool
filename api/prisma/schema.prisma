// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================
// Survey Definition Models
// ============================================================

model Survey {
  id          String    @id @default(cuid())
  title       String
  description String?
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  sections    Section[]
  submissions Submission[]
}

model Section {
  id       String     @id @default(cuid())
  surveyId String
  title    String
  order    Int
  
  questions Question[]
  survey    Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  
  @@index([surveyId])
}

model Question {
  id         String       @id @default(cuid())
  sectionId  String
  type       QuestionType
  prompt     String
  helpText   String?
  required   Boolean      @default(false)
  order      Int
  showIf     String?      // JSON string of condition to show this question
  
  options    Option[]
  answers    Answer[]
  section    Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@index([sectionId])
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  label      String
  value      String
  order      Int
  
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Branching fields moved here for simplicity: one row per option can describe
  // a branching action without a separate table.
  branchAction     BranchAction?
  targetQuestionId String?
  targetSectionId  String?
  skipToEnd        Boolean @default(false)

  @@index([questionId])
}

enum QuestionType {
  SINGLE    // Single choice (radio)
  MULTI     // Multiple choice (checkbox)
  LIKERT    // Likert scale 1-5
  TEXT      // Short text
  LONGTEXT  // Long text (textarea)
  NPS       // Net Promoter Score 0-10
  NUMBER    // Numeric input
}

// ============================================================
// Branching Logic Models
// ============================================================

enum BranchAction {
  SHOW_QUESTION  // Show a specific question
  SKIP_TO_SECTION // Skip to a section
  SKIP_TO_END    // End the survey
}

// ============================================================
// Response Models (Anonymous)
// ============================================================

model Submission {
  id         String   @id @default(uuid())
  surveyId   String
  eventSlug  String   // Non-linkable event identifier
  createdAt  DateTime @default(now())
  completedAt DateTime?
  
  answers    Answer[]
  survey     Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  
  @@index([surveyId])
  @@index([eventSlug])
  @@index([createdAt])
}

model Answer {
  id           String   @id @default(cuid())
  submissionId String
  questionId   String
  
  // Flexible storage for different answer types
  choiceValues String[] // For SINGLE, MULTI - stores selected option values
  textValue    String?  // For TEXT, LONGTEXT
  numberValue  Float?   // For LIKERT, NPS, NUMBER
  
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@unique([submissionId, questionId])
  @@index([submissionId])
  @@index([questionId])
}

// ============================================================
// Contact Models (Separate - NO foreign keys to responses)
// ============================================================

model Contact {
  id        String   @id @default(cuid())
  eventSlug String   // Only shared field - NOT a foreign key
  name      String?
  email     String?
  company   String?
  role      String?
  consent   Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([eventSlug])
  @@index([createdAt])
}

// ============================================================
// Admin & Audit Models
// ============================================================

model AdminUser {
  id           String      @id @default(cuid())
  email        String      @unique
  passwordHash String
  createdAt    DateTime    @default(now())
  lastLogin    DateTime?
  
  auditLogs    AuditLog[]
  refreshTokens RefreshToken[]
}

model AuditLog {
  id        String    @id @default(cuid())
  adminId   String?
  action    String    // e.g., "CREATE_SURVEY", "EXPORT_RESPONSES", "LOGIN"
  entity    String?   // e.g., "Survey", "Question"
  entityId  String?
  meta      Json?     // Additional context
  createdAt DateTime  @default(now())
  
  admin     AdminUser? @relation(fields: [adminId], references: [id])
  
  @@index([adminId])
  @@index([action])
  @@index([createdAt])
}

// ============================================================
// Refresh tokens for long-lived session renewal
// ============================================================

model RefreshToken {
  id         String   @id @default(cuid())
  tokenHash  String   @unique
  adminId    String
  userAgent  String?
  ip         String?
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  admin      AdminUser @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([expiresAt])
}

// ============================================================
// Session Store (for connect-pg-simple)
// ============================================================

model Session {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime
  
  @@index([expire])
}
